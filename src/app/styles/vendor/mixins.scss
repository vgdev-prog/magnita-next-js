@use "sass:math";

@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff"), url("../fonts/#{$file_name}.otf") format("otf");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

@mixin currency($sym) {
  &::after {
    content: "#{$sym}";
  }
}

@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

  $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
  }

  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(
            #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) -
				math.div($widthTo, 16)}
    );
  }

  @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }
  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}

@mixin min-320 {
  @media screen and (min-width: map-get($breakpoints, mb320)) {
    @content;
  }
}

@mixin min-480 {
  @media screen and (min-width: map-get($breakpoints, mb480)) {
    @content;
  }
}

@mixin min-768 {
  @media screen and (min-width: map-get($breakpoints, tb768)) {
    @content;
  }
}

@mixin min-991 {
  @media screen and (min-width: map-get($breakpoints, tb991)) {
    @content;
  }
}

@mixin min-1200 {
  @media screen and (min-width: map-get($breakpoints, dsk1200)) {
    @content;
  }
}

@mixin min320-max479 {
  @media screen and (min-width: map-get($breakpoints, mb320)) and (max-width: map-get($breakpoints, mb479)) {
    @content;
  }
}

@mixin min480-max767 {
  @media screen and (min-width: map-get($breakpoints, mb480)) and (max-width: map-get($breakpoints, mb767)) {
    @content;
  }
}

@mixin min320-max767 {
  @media screen and (min-width: map-get($breakpoints, mb320)) and (max-width: map-get($breakpoints, mb767)) {
    @content;
  }
}

@mixin min768-max991 {
  @media screen and (min-width: map-get($breakpoints, tb768)) and (max-width: map-get($breakpoints, tb991)) {
    @content;
  }
}

@mixin min768-max1199 {
  @media screen and (min-width: map-get($breakpoints, tb768)) and (max-width: map-get($breakpoints, tb1199)) {
    @content;
  }
}

@mixin min992-max1199 {
  @media screen and (min-width: map-get($breakpoints, tb992)) and (max-width: map-get($breakpoints, tb1199)) {
    @content;
  }
}
